import{VlElement,define}from"/node_modules/vl-ui-core/vl-core.js";export class VlCheckbox extends(VlElement(HTMLElement)){static get _observedAttributes(){return["label","value","checked"]}static get _observedChildClassAttributes(){return["block","single","disabled","error","switch"]}constructor(){super('\n            <style>\n                @import \'../style.css\';\n            </style>\n\n            <label id="label" class="vl-checkbox" for="checkbox">\n                <input class="vl-checkbox__toggle" type="checkbox" id="checkbox" name="checkbox"/>\n                <div class="vl-checkbox__label">\n                    <i class="vl-checkbox__box" aria-hidden="true"></i>\n                </div>\n            </label>\n        ')}connectedCallback(){this._inputElement.onchange=this._toggle,this._inputElement.oninput=e=>e.stopPropagation()}get _classPrefix(){return"vl-checkbox--"}get _inputElement(){return this._element.querySelector("input")}get _checkboxLabelElement(){return this._element.querySelector(".vl-checkbox__label")}toggle(){this._inputElement.click()}get checked(){return this._inputElement.checked}_toggle(){let e;const t=this.getRootNode().host;if(t._checked&&Array.isArray(t._checked)){const c=JSON.parse(this.value);t._checked.indexOf(c)>-1?t._checked.splice(t._checked.indexOf(c),1):t._checked.push(c),e=t._checked,t.setAttribute("checked",JSON.stringify(e))}else e=this.checked;t.dispatchEvent(new CustomEvent("input",{detail:this.checked,bubbles:!0,composed:!0}))}_labelChangedCallback(e,t){this._label=t,this._checkboxLabelElement.append(this._label)}_valueChangedCallback(e,t){this._inputElement.value=t}_checkedChangedCallback(e,t){try{this._checked=JSON.parse(t)}catch(e){this._checked=null!=t}Array.isArray(this._checked)?this._checked.indexOf(JSON.parse(this._inputElement.value))>-1&&(this._inputElement.checked=!0):this._inputElement.checked=this._checked}_disabledChangedCallback(e,t){this._inputElement.disabled=null!=t}_singleChangedCallback(){[...this._checkboxLabelElement.childNodes].filter(this._isTextNode).forEach(this._removeNode);const e=document.createElement("span");e.classList.add("vl-u-visually-hidden"),e.textContent=this._label,this._checkboxLabelElement.appendChild(e)}_isTextNode(e){return 3===e.nodeType}_removeNode(e){e.remove()}}define("vl-checkbox",VlCheckbox);
